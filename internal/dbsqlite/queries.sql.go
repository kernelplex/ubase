// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package dbsqlite

import (
	"context"
	"database/sql"
)

const addOrganization = `-- name: AddOrganization :exec

INSERT INTO organizations (id, name, system_name, status) 
VALUES (?1, ?2, ?3, ?4)
`

type AddOrganizationParams struct {
	ID         int64
	Name       string
	SystemName string
	Status     string
}

// ---------------------------------------------------------------------------
//
// # Organization Management
//
// ---------------------------------------------------------------------------
func (q *Queries) AddOrganization(ctx context.Context, arg AddOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, addOrganization,
		arg.ID,
		arg.Name,
		arg.SystemName,
		arg.Status,
	)
	return err
}

const addPermissionToRole = `-- name: AddPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission) 
VALUES (?1, ?2)
`

type AddPermissionToRoleParams struct {
	RoleID     int64
	Permission string
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionToRole, arg.RoleID, arg.Permission)
	return err
}

const addRole = `-- name: AddRole :exec

INSERT INTO roles (id, organization_id, name, system_name) 
VALUES (?1, ?2, ?3, ?4)
`

type AddRoleParams struct {
	ID             int64
	OrganizationID int64
	Name           string
	SystemName     string
}

// ---------------------------------------------------------------------------
//
// # Role Management
//
// ---------------------------------------------------------------------------
func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) error {
	_, err := q.db.ExecContext(ctx, addRole,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.SystemName,
	)
	return err
}

const addRoleToUser = `-- name: AddRoleToUser :exec
INSERT INTO user_roles (user_id, role_id) 
VALUES (?1, ?2)
`

type AddRoleToUserParams struct {
	UserID int64
	RoleID int64
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const addUser = `-- name: AddUser :exec

INSERT INTO users (id, first_name, last_name, display_name, email) 
VALUES (?1, ?2, ?3, ?4, ?5)
`

type AddUserParams struct {
	ID          int64
	FirstName   string
	LastName    string
	DisplayName string
	Email       string
}

// ---------------------------------------------------------------------------
//
// # User Management
//
// ---------------------------------------------------------------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.Email,
	)
	return err
}

const addUserToRole = `-- name: AddUserToRole :exec
INSERT INTO user_roles (user_id, role_id) 
VALUES (?1, ?2)
`

type AddUserToRoleParams struct {
	UserID int64
	RoleID int64
}

func (q *Queries) AddUserToRole(ctx context.Context, arg AddUserToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addUserToRole, arg.UserID, arg.RoleID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = ?1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, system_name, status FROM organizations WHERE id = ?1
`

func (q *Queries) GetOrganization(ctx context.Context, id int64) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SystemName,
		&i.Status,
	)
	return i, err
}

const getOrganizationBySystemName = `-- name: GetOrganizationBySystemName :one
SELECT id, name, system_name, status FROM organizations WHERE system_name = ?1
`

func (q *Queries) GetOrganizationBySystemName(ctx context.Context, systemName string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationBySystemName, systemName)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SystemName,
		&i.Status,
	)
	return i, err
}

const getOrganizationRoles = `-- name: GetOrganizationRoles :many
SELECT r.id, r.name, r.system_name FROM roles r
WHERE r.organization_id = ?1
`

type GetOrganizationRolesRow struct {
	ID         int64
	Name       string
	SystemName string
}

func (q *Queries) GetOrganizationRoles(ctx context.Context, organizationID int64) ([]GetOrganizationRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationRoles, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationRolesRow
	for rows.Next() {
		var i GetOrganizationRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SystemName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT id, name, system_name FROM organizations
`

type GetOrganizationsRow struct {
	ID         int64
	Name       string
	SystemName string
}

func (q *Queries) GetOrganizations(ctx context.Context) ([]GetOrganizationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationsRow
	for rows.Next() {
		var i GetOrganizationsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SystemName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT rp.permission FROM role_permissions rp
WHERE rp.role_id = ?1
`

func (q *Queries) GetRolePermissions(ctx context.Context, roleID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var permission string
		if err := rows.Scan(&permission); err != nil {
			return nil, err
		}
		items = append(items, permission)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, display_name, email FROM users WHERE id = ?1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, display_name, email FROM users WHERE email = ?1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getUserOrganizationPermissions = `-- name: GetUserOrganizationPermissions :many
SELECT rp.permission FROM user_roles ur
LEFT JOIN role_permissions rp ON rp.role_id = ur.role_id
WHERE ur.user_id = ?1 AND ur.organization_id = ?2
`

type GetUserOrganizationPermissionsParams struct {
	UserID         int64
	OrganizationID int64
}

func (q *Queries) GetUserOrganizationPermissions(ctx context.Context, arg GetUserOrganizationPermissionsParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrganizationPermissions, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var permission sql.NullString
		if err := rows.Scan(&permission); err != nil {
			return nil, err
		}
		items = append(items, permission)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserOrganizationRoles = `-- name: GetUserOrganizationRoles :many
SELECT r.id, r.name, r.system_name FROM user_roles ur
LEFT JOIN roles r ON r.id = ur.role_id
WHERE ur.user_id = ?1 AND r.organization_id = ?2
`

type GetUserOrganizationRolesParams struct {
	UserID         int64
	OrganizationID int64
}

type GetUserOrganizationRolesRow struct {
	ID         sql.NullInt64
	Name       sql.NullString
	SystemName sql.NullString
}

func (q *Queries) GetUserOrganizationRoles(ctx context.Context, arg GetUserOrganizationRolesParams) ([]GetUserOrganizationRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrganizationRoles, arg.UserID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserOrganizationRolesRow
	for rows.Next() {
		var i GetUserOrganizationRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SystemName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserOrganizations = `-- name: GetUserOrganizations :many
SELECT o.id, o.name, o.system_name 
FROM user_roles ur
LEFT JOIN roles r ON r.id = ur.role_id
LEFT JOIN organizations o ON o.id = r.organization_id
WHERE ur.user_id = ?1
`

type GetUserOrganizationsRow struct {
	ID         sql.NullInt64
	Name       sql.NullString
	SystemName sql.NullString
}

func (q *Queries) GetUserOrganizations(ctx context.Context, userID int64) ([]GetUserOrganizationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrganizations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserOrganizationsRow
	for rows.Next() {
		var i GetUserOrganizationsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SystemName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllRolesFromUser = `-- name: RemoveAllRolesFromUser :exec
DELETE FROM user_roles WHERE user_id = ?1
`

func (q *Queries) RemoveAllRolesFromUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, removeAllRolesFromUser, userID)
	return err
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM role_permissions 
WHERE role_id = ?1 AND permission = ?2
`

type RemovePermissionFromRoleParams struct {
	RoleID     int64
	Permission string
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.Permission)
	return err
}

const removeUserFromRole = `-- name: RemoveUserFromRole :exec
DELETE FROM user_roles WHERE user_id = ?1 AND role_id = ?2
`

type RemoveUserFromRoleParams struct {
	UserID int64
	RoleID int64
}

func (q *Queries) RemoveUserFromRole(ctx context.Context, arg RemoveUserFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromRole, arg.UserID, arg.RoleID)
	return err
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations SET 
name = ?1, system_name = ?2, status = ?3
WHERE id = ?4
`

type UpdateOrganizationParams struct {
	Name       string
	SystemName string
	Status     string
	ID         int64
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganization,
		arg.Name,
		arg.SystemName,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET 
name = ?1, system_name = ?2 WHERE id = ?3
`

type UpdateRoleParams struct {
	Name       string
	SystemName string
	ID         int64
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Name, arg.SystemName, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET first_name = ?1, last_name = ?2, display_name = ?3, email = ?4 WHERE id = ?5
`

type UpdateUserParams struct {
	FirstName   string
	LastName    string
	DisplayName string
	Email       string
	ID          int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.Email,
		arg.ID,
	)
	return err
}
