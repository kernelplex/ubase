// Code generated by evercore; DO NOT EDIT.
package evercoregen

import (
	"github.com/kernelplex/evercore/base"

	events "github.com/kernelplex/ubase/internal/evercoregen/events"
	"github.com/kernelplex/ubase/lib/ubmanage"
)

func StateEventDecoder(ev evercore.SerializedEvent) (evercore.EventState, error) {
	switch ev.EventType {

	// ================================================== 
	// State Events
	// ==================================================
	case events.OrganizationAddedEventType:
		eventState := ubmanage.OrganizationAddedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.OrganizationUpdatedEventType:
		eventState := ubmanage.OrganizationUpdatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.RoleCreatedEventType:
		eventState := ubmanage.RoleCreatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.RoleUpdatedEventType:
		eventState := ubmanage.RoleUpdatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserAddedEventType:
		eventState := ubmanage.UserAddedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserUpdatedEventType:
		eventState := ubmanage.UserUpdatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	}
	return nil, nil
}

func EventDecoder(ev evercore.SerializedEvent) (evercore.EventState, error) {
	switch ev.EventType {
	case events.RoleDeletedEventType:
		eventState := ubmanage.RoleDeletedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.RolePermissionAddedEventType:
		eventState := ubmanage.RolePermissionAddedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.RolePermissionRemovedEventType:
		eventState := ubmanage.RolePermissionRemovedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.RoleUndeletedEventType:
		eventState := ubmanage.RoleUndeletedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserAddedToRoleEventType:
		eventState := ubmanage.UserAddedToRoleEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserDisabledEventType:
		eventState := ubmanage.UserDisabledEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserEnabledEventType:
		eventState := ubmanage.UserEnabledEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserLoginFailedEventType:
		eventState := ubmanage.UserLoginFailedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserLoginPartiallySucceededEventType:
		eventState := ubmanage.UserLoginPartiallySucceededEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserLoginSucceededEventType:
		eventState := ubmanage.UserLoginSucceededEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserRemovedFromRoleEventType:
		eventState := ubmanage.UserRemovedFromRoleEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserTwoFactorAuthenticatedEventType:
		eventState := ubmanage.UserTwoFactorAuthenticatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserTwoFactorDisabledEventType:
		eventState := ubmanage.UserTwoFactorDisabledEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserTwoFactorEnabledEventType:
		eventState := ubmanage.UserTwoFactorEnabledEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserVerificationTokenGeneratedEventType:
		eventState := ubmanage.UserVerificationTokenGeneratedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.UserVerificationTokenVerifiedEventType:
		eventState := ubmanage.UserVerificationTokenVerifiedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	}
	return nil, nil
}

func init() {
	evercore.RegisterEventDecoder(
		StateEventDecoder,
		EventDecoder)
}
