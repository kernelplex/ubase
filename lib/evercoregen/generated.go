// Code generated by evercore; DO NOT EDIT.
package evercoregen

import (
	"github.com/kernelplex/evercore/base"

	events "github.com/kernelplex/ubase/lib/evercoregen/events"
	"github.com/kernelplex/ubase/lib/eventstore_events"
)

func StateEventDecoder(_ string, ev evercore.SerializedEvent) (evercore.EventState, error) {
	switch ev.EventType {

	// ================================================== 
	// State Events
	// ==================================================
	case events.UserCreatedEventType:
		eventState := eventstore_events.UserCreatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserLoginFailedEventType:
		eventState := eventstore_events.UserLoginFailedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserLoginSucceededEventType:
		eventState := eventstore_events.UserLoginSucceededEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserRolesUpdatedEventType:
		eventState := eventstore_events.UserRolesUpdatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	case events.UserUpdatedEventType:
		eventState := eventstore_events.UserUpdatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		state := evercore.NewStateEvent(eventState)
		return state, nil
	}
	return nil, nil
}

func EventDecoder(ev evercore.SerializedEvent) (evercore.EventState, error) {
	switch ev.EventType {
	case events.RoleCreatedEventType:
		eventState := eventstore_events.RoleCreatedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.RolePermissionAddedEventType:
		eventState := eventstore_events.RolePermissionAddedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	case events.RolePermissionRemovedEventType:
		eventState := eventstore_events.RolePermissionRemovedEvent {}
		err := evercore.DecodeEventStateTo(ev, &eventState)
		if err != nil {
			return nil, err
		}
		return eventState, nil
	}
	return nil, nil
}

func init() {
	evercore.RegisterStateEventDecoder(StateEventDecoder)
}
