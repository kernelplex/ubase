package views

import (
	"github.com/kernelplex/ubase/lib/contracts"
	"github.com/kernelplex/ubase/lib/ubadminpanel/templ/layouts"
	"github.com/kernelplex/ubase/lib/ubadminpanel/templ/views/components"
)

templ UserForm(vm contracts.UserFormViewModel) {
	@layouts.LayoutOrFragment(vm.Fragment, true, vm.Links) {
		<section class="auth-screen">
			<div class="auth-card">
				if vm.IsEdit {
					<h1>Edit User</h1>
				} else {
					<h1>Create User</h1>
				}
				if vm.Error != "" {
					<div class="error">{ vm.Error }</div>
				}
				<form class="auth-form" method="post">
					<div class="form-field">
						<label for="email">Email</label>
						<input id="email" type="email" name="email" value={ func() string { if vm.User != nil { return vm.User.Email } ; return "" }() } required/>
						@components.FieldErrors(vm.FieldErrors["email"])
					</div>
					<div class="form-field">
						<label for="password">Password</label>
						<input id="password" type="password" name="password" placeholder={ func() string { if vm.IsEdit { return "Leave blank to keep current password" } ; return "" }() }/>
						@components.FieldErrors(vm.FieldErrors["password"])
					</div>
					<div class="form-field">
						<label for="first_name">First Name</label>
						<input id="first_name" type="text" name="first_name" value={ func() string { if vm.User != nil { return vm.User.FirstName } ; return "" }() } required/>
						@components.FieldErrors(vm.FieldErrors["firstName"])
					</div>
					<div class="form-field">
						<label for="last_name">Last Name</label>
						<input id="last_name" type="text" name="last_name" value={ func() string { if vm.User != nil { return vm.User.LastName } ; return "" }() } required/>
						@components.FieldErrors(vm.FieldErrors["lastName"])
					</div>
					<div class="form-field">
						<label for="display_name">Display Name</label>
						<input id="display_name" type="text" name="display_name" value={ func() string { if vm.User != nil { return vm.User.DisplayName } ; return "" }() } required/>
						@components.FieldErrors(vm.FieldErrors["displayName"])
					</div>
					<div class="form-field">
						<label for="verified">Verified</label>
						if vm.User != nil && vm.User.Verified {
							<input id="verified" type="checkbox" name="verified" checked/>
						} else {
							<input id="verified" type="checkbox" name="verified"/>
						}
						@components.FieldErrors(vm.FieldErrors["verified"])
					</div>
					<div class="form-actions">
						<button type="submit">
							if vm.IsEdit {
								<span>Save Changes</span>
							} else {
								<span>Create User</span>
							}
						</button>
					</div>
				</form>
			</div>
		</section>
	}
}
