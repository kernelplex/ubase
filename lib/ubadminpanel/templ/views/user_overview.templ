package views

import (
	"fmt"
	"github.com/kernelplex/ubase/lib/contracts"
	"github.com/kernelplex/ubase/lib/ubadminpanel/templ/layouts"
	"time"
)

func formatTimestamp(ts int64) string {
	if ts <= 0 {
		return "-"
	}
	return time.Unix(ts, 0).UTC().Format("2006-01-02 15:04:05")
}

templ UserOverview(vm contracts.UserOverviewViewModel) {
	@layouts.LayoutOrFragment(vm.Fragment, true, vm.Links) {
		<div style="display: flex; gap: 1rem; align-items: stretch;">
			<div class="admin-card" style="flex:1;">
				<div style="display: flex; align-items: center; justify-content: space-between; gap: .75rem;">
					<h1>User: { vm.DisplayName }</h1>
					<a href={ fmt.Sprintf("/admin/users/%d/edit", vm.ID) } class="role-toggle" title="Edit user">Edit</a>
				</div>
				<div class="field-list">
					<div class="field-label">ID</div>
					<div class="field-value">{ vm.ID }</div>
					<div class="field-label">Email</div>
					<div class="field-value">{ vm.Email }</div>
					<div class="field-label">Name</div>
					<div class="field-value">{ vm.FirstName } { vm.LastName }</div>
					<div class="field-label">Verified</div>
					<div class="field-value">{ func() string { if vm.Verified { return "Yes" }; return "No" }() }</div>
					<div class="field-label">Disabled</div>
					<div class="field-value">{ func() string { if vm.Disabled { return "Yes" }; return "No" }() }</div>
				</div>
			</div>
			<div class="admin-card" style="flex:1;">
				<h2>Stats</h2>
				<div class="field-list">
					<div class="field-label">Last Login</div>
					<div class="field-value">{ formatTimestamp(vm.LastLogin) }</div>
					<div class="field-label">Total Logins</div>
					<div class="field-value">{ vm.LoginCount }</div>
					<div class="field-label">Last Failed Login</div>
					<div class="field-value">{ formatTimestamp(vm.LastFailedLogin) }</div>
					<div class="field-label">Failed Login Attempts</div>
					<div class="field-value">{ vm.FailedLoginAttempts }</div>
				</div>
			</div>
		</div>
		<div class="admin-card" id="roles-card">
			<h2>Roles</h2>
			<div style="margin: 0.75rem 0 1rem 0;">
				<div class="form-field">
					<label for="org-select">Organization</label>
					<select id="org-select" name="org" hx-get={ fmt.Sprintf("/admin/users/%d/roles", vm.ID) } hx-trigger="change" hx-target="#user-roles" hx-swap="outerHTML">
						for _, o := range vm.Organizations {
							if o.ID == vm.SelectedOrganization {
								<option value={ o.ID } selected>{ o.Name }</option>
							} else {
								<option value={ o.ID }>{ o.Name }</option>
							}
						}
					</select>
				</div>
			</div>
			<div id="user-roles" hx-get={ fmt.Sprintf("/admin/users/%d/roles?org=%d", vm.ID, vm.SelectedOrganization) } hx-trigger="load" hx-target="#user-roles" hx-swap="outerHTML"></div>
		</div>
		<div class="admin-card">
			<div class="settings-header">
				<h2>Settings</h2>
				<button type="button" class="role-toggle plus" onclick="document.getElementById('add-setting-form').classList.toggle('hidden')">+</button>
			</div>
			<div id="add-setting-form" class="add-setting-form hidden">
				<form hx-post={ fmt.Sprintf("/admin/users/%d/settings/add", vm.ID) } hx-target="#settings-table" hx-swap="outerHTML">
					<div class="setting-form-fields">
						<div class="form-field setting-field">
							<label for="setting-name">Name</label>
							<input type="text" id="setting-name" name="name" required class="setting-input"/>
						</div>
						<div class="form-field setting-field">
							<label for="setting-value">Value</label>
							<input type="text" id="setting-value" name="value" required class="setting-input"/>
						</div>
						<div class="setting-submit">
							<button type="submit" class="role-toggle">Add</button>
						</div>
					</div>
				</form>
			</div>
			<div id="settings-table" hx-get={ fmt.Sprintf("/admin/users/%d/settings", vm.ID) } hx-trigger="load" hx-swap="outerHTML"></div>
		</div>
	}
}
