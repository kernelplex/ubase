// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package ubase_db

import (
	"context"
	"database/sql"
)

const addPermissionToRole = `-- name: AddPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id) 
	VALUES (?1, ?2)
`

type AddPermissionToRoleParams struct {
	RoleID       int64
	PermissionID int64
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const addRole = `-- name: AddRole :one
insert into roles (role_id, name) 
	VALUES (?1, ?2)
	RETURNING role_id
`

type AddRoleParams struct {
	RoleID int64
	Name   string
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addRole, arg.RoleID, arg.Name)
	var role_id int64
	err := row.Scan(&role_id)
	return role_id, err
}

const addRoleToUser = `-- name: AddRoleToUser :exec
INSERT INTO user_roles (user_id, role_id) 
	VALUES (?1, ?2)
`

type AddRoleToUserParams struct {
	UserID int64
	RoleID int64
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, addRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const addUser = `-- name: AddUser :one


INSERT INTO users (user_id, first_name, last_name, display_name, email) 
	VALUES (?1, ?2, ?3, ?4, ?5)
	RETURNING user_id
`

type AddUserParams struct {
	UserID      int64
	FirstName   string
	LastName    string
	DisplayName string
	Email       string
}

// ---------------------------------------------------------------------------
//
// # User and Role management
//
// ---------------------------------------------------------------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.DisplayName,
		arg.Email,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name) 
	VALUES (?1)
	RETURNING permission_id
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPermission, name)
	var permission_id int64
	err := row.Scan(&permission_id)
	return permission_id, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT permission_id, name FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.PermissionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT p.permission_id, p.name FROM role_permissions rp
LEFT JOIN permissions p ON p.permission_id = rp.permission_id
WHERE rp.role_id = ?1
`

type GetRolePermissionsRow struct {
	PermissionID sql.NullInt64
	Name         sql.NullString
}

func (q *Queries) GetRolePermissions(ctx context.Context, roleID int64) ([]GetRolePermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolePermissionsRow
	for rows.Next() {
		var i GetRolePermissionsRow
		if err := rows.Scan(&i.PermissionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT role_id, name FROM roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select user_id, last_name, first_name, display_name, email from users where user_id = ?1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LastName,
		&i.FirstName,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select user_id, last_name, first_name, display_name, email from users where email = ?1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LastName,
		&i.FirstName,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT p.permission_id, p.name
FROM user_roles up
LEFT JOIN role_permissions rp ON rp.role_id = up.role_id
LEFT JOIN permissions p ON p.permission_id = up.permission_id
WHERE up.user_id = ?1
`

type GetUserPermissionsRow struct {
	PermissionID sql.NullInt64
	Name         sql.NullString
}

func (q *Queries) GetUserPermissions(ctx context.Context, userID int64) ([]GetUserPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPermissionsRow
	for rows.Next() {
		var i GetUserPermissionsRow
		if err := rows.Scan(&i.PermissionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT r.role_id, r.name FROM user_roles ur
LEFT JOIN roles r ON r.role_id = ur.role_id
WHERE ur.user_id = ?1
`

type GetUserRolesRow struct {
	RoleID sql.NullInt64
	Name   sql.NullString
}

func (q *Queries) GetUserRoles(ctx context.Context, userID int64) ([]GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRolesRow
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(&i.RoleID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllRolesFromUser = `-- name: RemoveAllRolesFromUser :exec
DELETE FROM user_roles WHERE user_id = ?1
`

func (q *Queries) RemoveAllRolesFromUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, removeAllRolesFromUser, userID)
	return err
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM role_permissions WHERE role_id = ?1 AND permission_id = ?2
`

type RemovePermissionFromRoleParams struct {
	RoleID       int64
	PermissionID int64
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET name = ?1 WHERE role_id = ?2
`

type UpdateRoleParams struct {
	Name   string
	RoleID int64
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Name, arg.RoleID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET last_name = ?1, 
    first_name = ?2, 
    display_name = ?3, 
    email = ?4 
WHERE user_id = ?5
`

type UpdateUserParams struct {
	LastName    string
	FirstName   string
	DisplayName string
	Email       string
	UserID      int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.LastName,
		arg.FirstName,
		arg.DisplayName,
		arg.Email,
		arg.UserID,
	)
	return err
}
